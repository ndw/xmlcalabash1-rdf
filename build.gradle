buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion
  }
}

plugins {
  id "java"
  id "osgi"
  id "maven"
  id "signing"
}

repositories {
  mavenCentral()
  maven { url "http://maven.restlet.org" }
  maven { url "http://developer.marklogic.com/maven2" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

configurations {
  copydep {
    extendsFrom runtime
  }
  copydep.exclude module: 'xmlcalabash'
  copydep.exclude module: 'nwalsh-annotations'
  copydep.exclude module: 'httpclient'
  copydep.exclude module: 'httpclient-cache'
  copydep.exclude module: 'httpcore'
  /* Exclude logging artifacts so they don't duplicate what's in XML Calabash */
  copydep.exclude module: 'jcl-over-slf4j'
  copydep.exclude module: 'log4j'
  copydep.exclude module: 'log4j-api'
  copydep.exclude module: 'log4j-core'
  copydep.exclude module: 'log4j-slf4j-impl'
  copydep.exclude module: 'org.restlet.ext.slf4j'
  copydep.exclude module: 'slf4j-api'
  copydep.exclude module: 'slf4j-log4j12'
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.name == 'saxon' && details.requested.version == '8.7') {
      details.useTarget "net.sf.saxon:Saxon-HE:" + saxonVersion
    }
  }
}

dependencies {
  compile (
    [group: 'com.nwalsh', name: 'nwalsh-annotations', version: '1.0.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.0-95'],
    [group: 'org.apache.jena', name: 'jena', version: '2.12.1' ],
    [group: 'org.apache.jena', name: 'jena-arq', version: '2.12.1' ],
    [group: 'org.apache.jena', name: 'jena-core', version: '2.12.1' ],
    [group: 'org.apache.jena', name: 'jena-iri', version: '1.1.1' ],
    [group: 'org.semarglproject', name: 'semargl-core', version: '0.6.1'],
    [group: 'org.semarglproject', name: 'semargl-rdfa', version: '0.6.1']
  )
}

// Variables
project.ext.saxonRelease = saxonVersion.substring(0,5)
project.ext.saxonBranch  = saxonVersion.substring(0,3).replaceAll("\\.", "")
project.ext.releaseVersion = version
project.ext.distVersion = version + snapshot
version = project.ext.distVersion // - gets turned into . in some contexts

task copyLib(type: Copy) {
  FileCollection lib = configurations.copydep
  String path = ""
  lib.each {
    File file -> path += " lib/" + file.name
  }
  project.ext.runtimeClasspath = path.trim()

  from lib
  into { "build/dist/lib" }
}

task copyCatalog(type: Copy) {
  from 'resources/catalog.xml'
  into 'build'
  filter { String line -> line.replaceAll('VERSION', distVersion) }
}

jar {
  from { ['build/catalog.xml', 'resources/library.xpl'] }
  manifest {
    instruction 'Built-By', builtBy
    instruction 'Implementation-Vendor', 'Norman Walsh'
    instruction 'Implementation-Title', 'XML Calabash RDF Steps'
    instruction 'Implementation-Version', distVersion
    instruction 'Bundle-SymbolicName', 'com.xmlcalabash.extensions.rdf'
    instruction 'Bundle-RequiredExecutionEnvironment', 'J2SE-1.7'
    instruction 'Export-Package', '*, etc'
    instruction 'Import-Package', 'net.sf.saxon.*;version=' + project.ext.saxonRelease + ',\
  javax.crypto.*,\
  javax.xml.*,\
  org.apache.commons.httpclient.*,\
  org.xml.sax.*,\
  *;resolution:=optional'
    instruction 'DynamicImport-Package', '*'
    instruction 'Class-Path', project.ext.runtimeClasspath + " lib"
  }
}
jar.dependsOn copyCatalog

// I refuse to put my PGP password in a file, so there's no way to
// make this work from a CI environment.
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(":uploadArchives")) {
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build." +
                       "\n\nPlease enter your signing details.\n\n"

        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

task copyNotices(type: Copy) {
  from 'resources/notices'
  into 'build/dist/docs/notices'
}
jar.dependsOn copyNotices

task copyStuff(type: Copy) {
  from 'README.md'
  from 'LICENSE.md'
  into 'build/dist'
}

task copyToDist(dependsOn: [copyLib,copyStuff]) {
  // nop
}
jar.dependsOn copyToDist

task javadocJar(type: Jar, dependsOn: javadoc) {
    from tasks.javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task copyJar(dependsOn: jar, type: Copy) {
  from "build/libs/xmlcalabash1-rdf-" + distVersion + ".jar"
  into "build/dist"
}

task copyJavaDoc(dependsOn: javadoc, type: Copy) {
  from "build/docs"
  into "build/dist/docs"
}

task testStep(type: JavaExec) {
  classpath = configurations.copydep + configurations.runtime + sourceSets.main.output

  main = 'com.xmlcalabash.drivers.Main'
  maxHeapSize = "1024m"
  args('-D', '-a', 'src/test/resources/test-pipeline.xpl')
}

task makeDist(dependsOn: [ build, copyJar, copyLib ]) << {
  println "Created distribution in build/dist"
}

task zipDist(dependsOn: makeDist, type: Zip) {
  from('build/dist')
  into 'xmlcalabash1-rdf-' + distVersion
  archiveName 'xmlcalabash1-rdf-' + distVersion + ".zip"
}

task dist(dependsOn: [testStep, zipDist]) << {
  // nop
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment ->
        signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom.project {
        name 'XML Calabash MarkLogic RDF Steps'
        packaging 'jar'
        description 'XML Calabash extension steps to load/query RDF'
        url 'https://github.com/ndw/xmlcalabash1-rdf'

        scm {
          url 'scm:git@github.com:ndw/xmlcalabash1-rdf.git'
          connection 'scm:git@github.com:ndw/xmlcalabash1-rdf.git'
          developerConnection 'scm:git@github.com:ndw/xmlcalabash1-rdf.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'ndw'
            name 'Norman Walsh'
          }
        }
      }
    }
  }
}
